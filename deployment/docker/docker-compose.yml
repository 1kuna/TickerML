version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: tickerml_postgres
    environment:
      POSTGRES_DB: tickerml
      POSTGRES_USER: tickerml
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tickerml_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - tickerml_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tickerml -d tickerml"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tickerml_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-tickerml_redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tickerml_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: tickerml_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - tickerml_network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: tickerml_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - tickerml_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TickerML Dashboard Application
  dashboard:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: tickerml_dashboard
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://tickerml:${POSTGRES_PASSWORD:-tickerml_password}@postgres:5432/tickerml
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-tickerml_redis}@redis:6379
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      # Application
      ENVIRONMENT: production
      DEBUG: false
      DASHBOARD_SECRET_KEY: ${DASHBOARD_SECRET_KEY}
      LOG_LEVEL: INFO
      
      # Exchange API keys (set in .env file)
      BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      COINBASE_API_KEY: ${COINBASE_API_KEY:-}
      COINBASE_SECRET_KEY: ${COINBASE_SECRET_KEY:-}
      KRAKEN_API_KEY: ${KRAKEN_API_KEY:-}
      KRAKEN_SECRET_KEY: ${KRAKEN_SECRET_KEY:-}
      KUCOIN_API_KEY: ${KUCOIN_API_KEY:-}
      KUCOIN_SECRET_KEY: ${KUCOIN_SECRET_KEY:-}
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
      - app_models:/app/models
    ports:
      - "8000:8000"
    networks:
      - tickerml_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  # Data Collector Service
  data_collector:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: tickerml_data_collector
    depends_on:
      dashboard:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://tickerml:${POSTGRES_PASSWORD:-tickerml_password}@postgres:5432/tickerml
      REDIS_URL: redis://:${REDIS_PASSWORD:-tickerml_redis}@redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ENVIRONMENT: production
      BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      COINBASE_API_KEY: ${COINBASE_API_KEY:-}
      COINBASE_SECRET_KEY: ${COINBASE_SECRET_KEY:-}
      KRAKEN_API_KEY: ${KRAKEN_API_KEY:-}
      KRAKEN_SECRET_KEY: ${KRAKEN_SECRET_KEY:-}
      KUCOIN_API_KEY: ${KUCOIN_API_KEY:-}
      KUCOIN_SECRET_KEY: ${KUCOIN_SECRET_KEY:-}
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - tickerml_network
    restart: unless-stopped
    command: ["python", "raspberry_pi/orderbook_collector.py"]

  # Paper Trading Service
  paper_trader:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: tickerml_paper_trader
    depends_on:
      data_collector:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://tickerml:${POSTGRES_PASSWORD:-tickerml_password}@postgres:5432/tickerml
      REDIS_URL: redis://:${REDIS_PASSWORD:-tickerml_redis}@redis:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ENVIRONMENT: production
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
      - app_models:/app/models
    networks:
      - tickerml_network
    restart: unless-stopped
    command: ["python", "raspberry_pi/paper_trader.py"]

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: tickerml_nginx
    depends_on:
      - dashboard
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/letsencrypt:/var/www/letsencrypt:ro
    networks:
      - tickerml_network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: tickerml_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tickerml_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: tickerml_grafana
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tickerml_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  app_logs:
  app_data:
  app_models:
  prometheus_data:
  grafana_data:

networks:
  tickerml_network:
    driver: bridge